<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blazing216.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://blazing216.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-03T23:19:12+00:00</updated><id>https://blazing216.github.io/feed.xml</id><title type="html">Dr Yihe Xu, Seismologist at Cambridge</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Test SVG</title><link href="https://blazing216.github.io/blog/2024/test-svg/" rel="alternate" type="text/html" title="Test SVG"/><published>2024-06-03T23:13:00+00:00</published><updated>2024-06-03T23:13:00+00:00</updated><id>https://blazing216.github.io/blog/2024/test-svg</id><content type="html" xml:base="https://blazing216.github.io/blog/2024/test-svg/"><![CDATA[<p>To achieve my ultimate goal of building a interactive webpage, I tested adding SVG into the Markdown file and control it using HTML slider.</p> <p>I tested it in <code class="language-plaintext highlighter-rouge">_project/1_project.md</code>. The follwing HTML code was added into the Markdown file right after the 2nd paragraph. It produces one slider and one circle.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;h1&gt;</span>This is a svg figure.<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"slidecontainer"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"range"</span> <span class="na">min=</span><span class="s">"1"</span> <span class="na">max=</span><span class="s">"100"</span> <span class="na">value=</span><span class="s">"50"</span>
       <span class="na">class=</span><span class="s">"slider"</span> <span class="na">id=</span><span class="s">"circleRadius"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;p&gt;</span>Value: <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"demo"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">"100"</span> <span class="na">height=</span><span class="s">"100"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;circle</span> <span class="na">id=</span><span class="s">"circle"</span> <span class="na">cx=</span><span class="s">"50"</span> <span class="na">cy=</span><span class="s">"50"</span> <span class="na">r=</span><span class="s">"40"</span> <span class="na">stroke=</span><span class="s">"green"</span> 
        <span class="na">stroke-width=</span><span class="s">"4"</span> <span class="na">fill=</span><span class="s">"yellow"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/svg&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Then I need to change the size of the circle using the HTML slider. The code below does the job.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">slider</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">circleRadius</span><span class="dl">"</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">demo</span><span class="dl">"</span><span class="p">);</span>
    
    <span class="kd">var</span> <span class="nx">moveSlider</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">slider</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">slider</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">circle</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">circle</span><span class="p">.</span><span class="nf">setAttributeNS</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="dl">"</span><span class="s2">r</span><span class="dl">"</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">output</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">slider</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

    <span class="nx">slider</span><span class="p">.</span><span class="nx">oninput</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nf">moveSlider</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="nx">output</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">moveSlider</code> is a function that the slider calls everytime it moves (<code class="language-plaintext highlighter-rouge">oninput</code> is called). The function gets the slider’s value and set the circle’s radius to this value.</p> <p>Tips: use <code class="language-plaintext highlighter-rouge">console.log(circle)</code> can print the svg corresponds to <code class="language-plaintext highlighter-rouge">circle</code> to console. In Google Chrome, ‘Developer Tools’ shows the console.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[To achieve my ultimate goal of building a interactive webpage, I tested adding SVG into the Markdown file and control it using HTML slider.]]></summary></entry><entry><title type="html">Run Jekyll locally</title><link href="https://blazing216.github.io/blog/2024/run-jekyll-locally/" rel="alternate" type="text/html" title="Run Jekyll locally"/><published>2024-06-03T22:02:00+00:00</published><updated>2024-06-03T22:02:00+00:00</updated><id>https://blazing216.github.io/blog/2024/run-jekyll-locally</id><content type="html" xml:base="https://blazing216.github.io/blog/2024/run-jekyll-locally/"><![CDATA[<p>I wanted to run Jekyll locally to test my website, but failed to run <code class="language-plaintext highlighter-rouge">bundle install</code>. Following the warning message, I updated the bundler by</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>gem <span class="nb">install </span>bundler <span class="nt">-v</span> 2.4.22
</code></pre></div></div> <p>I could not install the lastest version of bundler because my Ruby version is not new enough (&gt;= 3.0.0 was required, but my version was 2.4.22).</p> <p>I tried <code class="language-plaintext highlighter-rouge">bundle install</code> again, which failed again. Following the recommendation, I updated <code class="language-plaintext highlighter-rouge">gem</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>gem update <span class="nt">--system</span> 3.2.3
</code></pre></div></div> <p>Along the way I learned that <code class="language-plaintext highlighter-rouge">Jekyll</code> is a <code class="language-plaintext highlighter-rouge">Ruby Gem</code>.</p> <p>Following the instructions on <code class="language-plaintext highlighter-rouge">https://jekyllrb.com/docs/installation/macos/</code>, I installed the ruby again using <code class="language-plaintext highlighter-rouge">chruby</code>. The steps were</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install chruby ruby-install xz
</code></pre></div></div> <p>Add the following lines to <code class="language-plaintext highlighter-rouge">~/.bash_profile</code>,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source /opt/homebrew/opt/chruby/share/chruby/chruby.sh
source /opt/homebrew/opt/chruby/share/chruby/auto.sh
export LDFLAGS="-L/opt/homebrew/opt/curl/lib"
export CPPFLAGS="-I/opt/homebrew/opt/curl/include"
export PKG_CONFIG_PATH="/opt/homebrew/opt/curl/lib/pkgconfig"
</code></pre></div></div> <p>Install the ruby</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby-install ruby 3.1.3
</code></pre></div></div> <p>Add the following lines to <code class="language-plaintext highlighter-rouge">~/.bash_profile</code>,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chruby ruby-3.1.3
</code></pre></div></div> <p>Install jekyll, bundler</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install jekyll
gem install bundler
</code></pre></div></div> <p>Run</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install
</code></pre></div></div> <p>Start the server</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve
</code></pre></div></div> <p>A tiny problem was met that <code class="language-plaintext highlighter-rouge">Jekyll Diagrams: Command Not Found: mmdc</code> The problem can be solved by</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install npm
npm install -g @mermaid-js/mermaid-cli
npm install -g npm@10.8.1
</code></pre></div></div> <p>If open <code class="language-plaintext highlighter-rouge">http://127.0.0.1:4000/</code> in a web broswer, then we can view the website locally.</p> <p>After making any changes to the files, without re-run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> again, just refresh the page to see the changes. It may take a few seconds to recompile the website.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I wanted to run Jekyll locally to test my website, but failed to run bundle install. Following the warning message, I updated the bundler by sudo gem install bundler -v 2.4.22 I could not install the lastest version of bundler because my Ruby version is not new enough (&gt;= 3.0.0 was required, but my version was 2.4.22).]]></summary></entry><entry><title type="html">Use GridSpec to organise your figure</title><link href="https://blazing216.github.io/blog/2022/matplotlib-gridspec/" rel="alternate" type="text/html" title="Use GridSpec to organise your figure"/><published>2022-11-22T17:31:00+00:00</published><updated>2022-11-22T17:31:00+00:00</updated><id>https://blazing216.github.io/blog/2022/matplotlib-gridspec</id><content type="html" xml:base="https://blazing216.github.io/blog/2022/matplotlib-gridspec/"><![CDATA[<p>Using <code class="language-plaintext highlighter-rouge">GridSpec</code> is easier to organise the subplots. It is like <code class="language-plaintext highlighter-rouge">psbasemap</code> in GMT, which gives more flexibility to set the position and organsiation of the subplots.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec

a4 = (8.27, 11.69)

fig = plt.figure(figsize=a4)
gs = GridSpec(1, 1, left=0.1, right=0.7, top=0.95, bottom=0.8)
ax = fig.add_subplot(gs[0,0])
</code></pre></div></div> <p>More <code class="language-plaintext highlighter-rouge">GridSpec</code> can be added, like multiple <code class="language-plaintext highlighter-rouge">psbasemap</code> in GMT. <code class="language-plaintext highlighter-rouge">GridSpec</code> has one advantage over <code class="language-plaintext highlighter-rouge">psbasemap</code> when multiple subplots with similar x and y ranges are needed. Using <code class="language-plaintext highlighter-rouge">GridSpec(m, n, ...)</code> can set up subplots.</p>]]></content><author><name></name></author><category term="matplotlib"/><category term="Python"/><summary type="html"><![CDATA[Easy configuration of multiple subplots]]></summary></entry><entry><title type="html">How to use print images in batch (Mac)</title><link href="https://blazing216.github.io/blog/2022/how-to-print-images-in-batch/" rel="alternate" type="text/html" title="How to use print images in batch (Mac)"/><published>2022-11-22T15:15:00+00:00</published><updated>2022-11-22T15:15:00+00:00</updated><id>https://blazing216.github.io/blog/2022/how-to-print-images-in-batch</id><content type="html" xml:base="https://blazing216.github.io/blog/2022/how-to-print-images-in-batch/"><![CDATA[<p>Occasionally, you may need to print a set of images with a specific printer settings. For example, <code class="language-plaintext highlighter-rouge">landspace</code> + <code class="language-plaintext highlighter-rouge">scale to fit</code> + <code class="language-plaintext highlighter-rouge">fit to image</code> + <code class="language-plaintext highlighter-rouge">single-sided</code>. The following tip will save you from the tedious iteration of opening a file, change settings and print.</p> <p>Assume the image files (*.jpg, *.png, etc.) are in the same folder,</p> <ul> <li>Select all the files your want to print, either by (1) drag a box around the files; (2) select the first one, hold Shift, and then click the last one; (3) hold Command and select each file you need.</li> <li>Open with <code class="language-plaintext highlighter-rouge">Preview</code></li> <li>Press <code class="language-plaintext highlighter-rouge">Command + P</code>, which opens up the printer window</li> <li>If applicable, Change the settings of the printer</li> <li>Print</li> </ul>]]></content><author><name></name></author><category term="Mac"/><summary type="html"><![CDATA[A simple tip to make your life easier]]></summary></entry><entry><title type="html">How to use GMT</title><link href="https://blazing216.github.io/blog/2022/how-to-use-gmt/" rel="alternate" type="text/html" title="How to use GMT"/><published>2022-11-21T20:15:00+00:00</published><updated>2022-11-21T20:15:00+00:00</updated><id>https://blazing216.github.io/blog/2022/how-to-use-gmt</id><content type="html" xml:base="https://blazing216.github.io/blog/2022/how-to-use-gmt/"><![CDATA[<h3 id="sample-velocity-at-points-in-a-given-region">Sample velocity at points in a given region</h3> <p>Use <code class="language-plaintext highlighter-rouge">gmtselect</code> to select points from <code class="language-plaintext highlighter-rouge">points.xy</code> that falls in the region defined by <code class="language-plaintext highlighter-rouge">-R$R -J$J</code>. Rectangle map regions, specified by <code class="language-plaintext highlighter-rouge">-Rlon1/lat1/lon2/lat2r</code> is also supported.</p> <p>Use <code class="language-plaintext highlighter-rouge">grdtrack</code> to sample the points. <code class="language-plaintext highlighter-rouge">-Rg</code> seems to avoid the problem of ambigious representation of longitude (e.g. -180 and 360 are the same longitude)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gmt gmtselect -R$R -J$J points.xy | gmt grdtrack -Rg -Gvelocity.grd &gt; sampled_vs.xy
</code></pre></div></div> <h3 id="how-gmt-tell-the-inside-and-outside-of-a-polygon">How GMT tell the inside and outside of a polygon?</h3> <h3 id="use-gmtselect-to-exclude-points-in-an-area-defined-by-a-polygon">Use <code class="language-plaintext highlighter-rouge">gmtselect</code> to exclude points in an area defined by a polygon</h3> <ul> <li>Use <code class="language-plaintext highlighter-rouge">-Fpolygonfile</code> to specify the polygon file</li> <li>Use <code class="language-plaintext highlighter-rouge">-If</code> to select points outside the polygon. If <code class="language-plaintext highlighter-rouge">-If</code> is not given, then <code class="language-plaintext highlighter-rouge">gmtselect</code> will select the points inside the polygon</li> <li>Use <code class="language-plaintext highlighter-rouge">-fg</code> to tell <code class="language-plaintext highlighter-rouge">gmtselect</code> that your data are geographical, in longitude and latitude, if no projection is given.</li> <li>The polygon file is a muliple-segment file. It must be in ASCII. It can define multiple polygons, but no consecutive points can be “separated by 180 degrees or more in longitude”, when lon, lat is used.</li> </ul> <p>So the command to exclude points in an area (defined by <code class="language-plaintext highlighter-rouge">mypolygon.xy</code>) is</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># GMT5
gmt gmtselect mydata.txt -Fmypolygon.xy -fg -If &gt; myselecteddata.txt

# GMT6
gmt select mydata.txt -Fmypolygon.xy -fg -If &gt; myselecteddata.txt
</code></pre></div></div> <p>The output <code class="language-plaintext highlighter-rouge">myselecteddata.txt</code> will not have points falls into the given area.</p> <h3 id="convert-utm-coordinates-to-longitude-and-latitude">Convert UTM coordinates to longitude and latitude</h3> <p>UTM in 16U to lonlat</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gmt mapproject utm.xy -Ju+16/1:1 -C -I -F
</code></pre></div></div> <p>lonlat to UTM in 16U</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gmt mapproject lonlat.xy -Ju+16/1:1 -C -F
</code></pre></div></div>]]></content><author><name></name></author><category term="GMT"/><summary type="html"><![CDATA[GMT]]></summary></entry><entry><title type="html">How to write the first draft</title><link href="https://blazing216.github.io/blog/2022/processes-of-writing-paper/" rel="alternate" type="text/html" title="How to write the first draft"/><published>2022-08-29T20:44:00+00:00</published><updated>2022-08-29T20:44:00+00:00</updated><id>https://blazing216.github.io/blog/2022/processes-of-writing-paper</id><content type="html" xml:base="https://blazing216.github.io/blog/2022/processes-of-writing-paper/"><![CDATA[<blockquote> <p>Updated 2023-07-31</p> </blockquote> <p>Writing papers can divived into several processes. Preparing, Brainstorming, draft, revise, revise, revise and submit, and revise more. The revision stage is semi-automatic driven your and your collaborators’ critical eyes. The actually creative part is how to make the first draft.</p> <h2 id="how-to-reach-the-first-draft">How to reach the first draft</h2> <p>I have gained new understanding of how to write the first draft, greatly inspired by the ‘Essay Writing Guide’ by Prof. Jordan B Peterson. I started with following exactly his guide, but began to tweak it to suit my own suitation.</p> <p>The first observation during the application of Prof. Peterson’s Guide is that writing papers may take more iterations than writing essays. I found there are loads of details that need to be figured out during write, probably because a combination of my perfectism and the data-oriented nature of seismology. The second observation is that new ideas and the suitable organisation of the paper come during the first few iterations of the writing.</p> <p>Therefore, it feels unnecessary to focus on revising sentences too much in the first iteration before deciding the actual structure of the paper. Often, I found myself deleting one or more paragraphs when finalsing the writing. These paragraphs are more like exploratory writing, which records my braindump. They are really useful as the base of the more structured thinking afterwards, but polishing them seems worthless.</p> <p>I think the way that suits me better is to focus on the structure first. Starts with a draft outline, write explorately, do reading and fix details, do more exploratory writing, then organise them, read them, write a new outline, paste the sentences in the new outline. Then I get the first draft that I can apply the guide of Prof. Peterson.</p> <p>The process before the first draft might be similar to the reading and taking notes in the guide. I think it is. But a difference is to use exploratory writing to generate ideas.</p> <p>The exploratory writing may be useful in other stages of writing. I think I may use the technique a few times before, because I always rewrite largely my drafts and the draft only becomes stable after two or three times of rewriting. Maybe that is because I was actually doing exploratory writing in the first one or two drafts.</p> <p>The lesson for me is that I can start to write early on, to note down my thoughts, explore new ideas, which can create a collection of rich documents when I start to write the ‘first draft’ later on.</p> <h2 id="first-draft">First draft</h2> <p>The first draft focuses on the logic of paper. You should have a theme argument (Introduction), reasoning (Discussion) and evidence (Data, Method and Results). A background is often useful for a wide audience (Introduction). The challenge is you need to come up with a logic with linear structure, so readers can follow you logic when skimming through your paper. Two actual challenge are (1) you have no idea how to come up with such a structure; (2) you have many options but cannot decide which is the best.</p> <h2 id="how-to-decide-the-logic-of-the-draft">How to decide the logic of the draft</h2> <p>The second one is more painful than the first one. It is not uncommon that one experiment may produce evidences that provide insights to various questions. Even for a single question, you can formulate it in various ways, smaller or larger. Although when you want to answer a larger question, evidences from other studies will be needed. It means more effort and less likely to be convincing but also is more likely to end up in a higher impact journal.</p> <p>When formulating the questions, it might be good to keep a few options range from smaller and larger. For example, questions with sure-answers and questions with larger impact. We can delay the choice later and chose the largest question with sufficient evidence. Larger questions are valuable too. They lead to more research questions for future studies.</p> <p>Once the research question is decided, the logic is obvious.</p> <h2 id="how-to-formulate-research-questions">How to formulate research questions</h2> <h3 id="copy-or-modify-the-one-in-the-research-plan">Copy or Modify the one in the research plan</h3> <p>If a research plan is written before the study started, the plan can be a good source for research questions</p> <h3 id="start-from-the-results-and-ask-so-what">Start from the results and ask “so what”.</h3> <p>It is very unlikely that a researcher do research for no reasons. It is more likely that we find something surprising and unexpected by-products and try to explore its significance.</p> <h3 id="start-from-a-list-of-related-questions-and-decide-which-one-the-results-contribute-the-most">Start from a list of related questions and decide which one the results contribute the most.</h3> <p>I am not sure if this works. It is more helpful when trying to think of a idea for proposals. Actually, formulating a research question is similar to writing proposals.</p> <h2 id="organisation-of-the-folder-structure">Organisation of the folder structure</h2> <p>I found that, besides a messy and large folder structure that keeps all the information you created during the research, it is good to have a small folder that stores selected, organised dataset/figures/documents that distilled from the research process.</p> <p>For example, a set of figures for a certain manuscript.</p>]]></content><author><name></name></author><category term="Academic"/><category term="Writing"/><summary type="html"><![CDATA[Writing]]></summary></entry><entry><title type="html">Tips on developing new python scripts</title><link href="https://blazing216.github.io/blog/2022/tips-developing-new-script/" rel="alternate" type="text/html" title="Tips on developing new python scripts"/><published>2022-06-28T17:18:00+00:00</published><updated>2022-06-28T17:18:00+00:00</updated><id>https://blazing216.github.io/blog/2022/tips-developing-new-script</id><content type="html" xml:base="https://blazing216.github.io/blog/2022/tips-developing-new-script/"><![CDATA[<p>I need to write new python scripts once a while for research projects. Sometimes I wrote the same script more than once because I forgot where the previous script is. Sometimes I wrote a similar script because the previous script does not fits my current need completely and needs minor changes. After writing same and similar scripts for several times, I found the following way can help reduce the time of rewriting.</p> <h2 id="separate-your-scripts-into-reusable-parts-and-non-resuable-parts">Separate your scripts into reusable parts and non-resuable parts.</h2> <h2 id="create-a-python-library-collect-the-resuable-parts">Create a python library collect the resuable parts.</h2> <p>You can use <code class="language-plaintext highlighter-rouge">pip install -e .</code> to install this library, which will automatically add in the new files you add into the folder to the package. In this way, you don’t need to include the path to the script to <code class="language-plaintext highlighter-rouge">PATH</code> or <code class="language-plaintext highlighter-rouge">sys.path</code>.</p> <h2 id="write-the-non-resuable-parts-calling-the-resuable-parts-in-the-scripts-folder-under-each-project">Write the non-resuable parts (calling the resuable parts) in the scripts folder under each project.</h2> <p>Experimenting the workflow using jupyter notebook and then use <code class="language-plaintext highlighter-rouge">jupyter nbconvert --to script your.ipynb</code> to convert the jupyter notebook to a python script.</p> <p>It is OK to run the jupyter notebook using <code class="language-plaintext highlighter-rouge">nbconvert</code> as well, but the output will not show in the terminal, which makes it difficult to track the progress.</p>]]></content><author><name></name></author><category term="Python"/><summary type="html"><![CDATA[Python scripts]]></summary></entry><entry><title type="html">Writing mindset</title><link href="https://blazing216.github.io/blog/2022/writing-mindset/" rel="alternate" type="text/html" title="Writing mindset"/><published>2022-06-13T17:18:00+00:00</published><updated>2022-06-13T17:18:00+00:00</updated><id>https://blazing216.github.io/blog/2022/writing-mindset</id><content type="html" xml:base="https://blazing216.github.io/blog/2022/writing-mindset/"><![CDATA[<p>I have been struggling with writing academic papers for a long time, which has profoundly affected my career.</p> <p>Today I was doing my usual searching of ‘tips on academic writing’ to start up my writing when I found the blog <a href="https://blog.une.edu.au/usingpsychology/2011/09/30/do-you-have-essay-writing-phobia/comment-page-1/">Overcoming essay-writing phobia</a>.</p> <p>It confirms again that fear of writing is not a sole experience of mine. But what I found striking and mind-blowing is the sentence below,</p> <blockquote> <p>Change your goal to something realistic and valuable, like doing your best under the circumstances or submitting on time or ending your avoidance. Put aside goals of being perfect and impressing the heck out of someone.</p> </blockquote> <p>This is the first suggestion among the 10 strategies in the post. When I read the suggestion, I feel the heavy burden on my chest is lifted. ‘Doing your best under the circumstance’ sounds much easier than ‘impressing the heck out of someone’. The latter has been my goal of writing for a long time (maybe since the beginning of my academic life, since the starting of my PhD). ‘Doing your best’ is a realistic goal, which anyone can achieve.</p> <p>This reminds me of the mindset shifting since I moved abroad, which is being realistic and understanding that you are just a normal human being. This mindset shift does not mean I stop working hard, instead, it often makes me work more efficiently and effectively. The shifting relieves the mental burden from me that paralyzed me.</p> <p>I will carefully set realistic goals for my future writing tasks and let us see if it works.</p>]]></content><author><name></name></author><category term="Python"/><summary type="html"><![CDATA[Writing]]></summary></entry><entry><title type="html">Modify BitOr operator in Python using ast</title><link href="https://blazing216.github.io/blog/2022/try-ast/" rel="alternate" type="text/html" title="Modify BitOr operator in Python using ast"/><published>2022-06-07T13:29:00+00:00</published><updated>2022-06-07T13:29:00+00:00</updated><id>https://blazing216.github.io/blog/2022/try-ast</id><content type="html" xml:base="https://blazing216.github.io/blog/2022/try-ast/"><![CDATA[<p>Python scripts are parsed into a AST before compiling to bytecode and execute. Modifying the AST can change how Python scripts behave in runtime, without touching the code itself. The official module for modifying the AST is <a href="https://docs.python.org/3/library/ast.html"><code class="language-plaintext highlighter-rouge">ast</code></a>.</p> <p>However, it is not easy to modify the AST and the number of available tutorials is low. I will note down necessary steps while learning it.</p> <p>My first example is modifying the BitOr operator <code class="language-plaintext highlighter-rouge">|</code> in Python. It is rarely used in my daily Python scripts and I think it may help to use it as a pipeline operator. In processing seismological data, it is common to have a data passing through a series of operations. Pipeline is naturally fit here.</p> <p>I made a minimal example to work on, with two files, <code class="language-plaintext highlighter-rouge">add.py</code> and <code class="language-plaintext highlighter-rouge">test.py</code>. <code class="language-plaintext highlighter-rouge">add.py</code> defines a function <code class="language-plaintext highlighter-rouge">add</code> and <code class="language-plaintext highlighter-rouge">test.py</code> calls the function <code class="language-plaintext highlighter-rouge">add</code> using a ‘pipeline syntax’.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># add.py
</span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span></code></pre></figure> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># test.py
</span><span class="kn">import</span> <span class="n">add</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">|</span> <span class="n">add</span><span class="p">.</span><span class="n">add</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">res = </span><span class="sh">'</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span></code></pre></figure> <p>To run the <code class="language-plaintext highlighter-rouge">test.py</code>, I wrote another script <code class="language-plaintext highlighter-rouge">main.py</code> which reads in test.py, parses, modifies the BitOr operator and run the modified code.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># main.py
</span><span class="kn">import</span> <span class="n">ast</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">test.py</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

<span class="n">tree</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ParsePipe</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">NodeTransformer</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">visit_BinOp</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">op</span><span class="p">,</span> <span class="n">ast</span><span class="p">.</span><span class="n">BitOr</span><span class="p">):</span>
            <span class="n">new_node</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="nc">Call</span><span class="p">(</span><span class="n">func</span><span class="o">=</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">,</span>
                    <span class="n">args</span><span class="o">=</span><span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="n">elts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                        <span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="n">elts</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span>
                    <span class="n">keywords</span><span class="o">=</span><span class="p">[])</span>
            <span class="n">ast</span><span class="p">.</span><span class="nf">copy_location</span><span class="p">(</span><span class="n">new_node</span><span class="p">,</span> <span class="n">node</span><span class="p">)</span>
            <span class="n">ast</span><span class="p">.</span><span class="nf">fix_missing_locations</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">new_node</span>
        <span class="k">return</span> <span class="n">node</span>

<span class="nf">exec</span><span class="p">(</span><span class="nf">compile</span><span class="p">(</span><span class="nc">ParsePipe</span><span class="p">().</span><span class="nf">visit</span><span class="p">(</span><span class="n">tree</span><span class="p">),</span> <span class="sh">'</span><span class="s">test.py</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">exec</span><span class="sh">'</span><span class="p">))</span></code></pre></figure> <p>Running <code class="language-plaintext highlighter-rouge">python main.py</code> produces <code class="language-plaintext highlighter-rouge">res = 3</code>. What the <code class="language-plaintext highlighter-rouge">main.py</code> does is</p> <ul> <li>Parse. <code class="language-plaintext highlighter-rouge">ast.parse</code> parses the Python code to a AST tree.</li> <li>Modify. The class <code class="language-plaintext highlighter-rouge">ParsePipe</code> traverses every <code class="language-plaintext highlighter-rouge">BinOp</code> node in the AST and replace it by a function call if the node is a <code class="language-plaintext highlighter-rouge">BitOr</code> node. The function call uses the right side of the <code class="language-plaintext highlighter-rouge">BitOr</code> as the function and the left side as the arguments.</li> <li>Compile and Run. Compile the modified AST with the original script name and the argument <code class="language-plaintext highlighter-rouge">exec</code>. Run using the <code class="language-plaintext highlighter-rouge">exec</code> function</li> </ul> <h2 id="further-reading">Further Reading</h2> <ul> <li><a href="https://late.am/post/2012/03/26/exploring-python-code-objects.html">Exploring Python Code Objects</a></li> <li><a href="https://greentreesnakes.readthedocs.io/en/latest/">Green Tree Snakes - the missing Python AST docs</a></li> </ul>]]></content><author><name></name></author><category term="Python"/><summary type="html"><![CDATA[Python ast]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://blazing216.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://blazing216.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://blazing216.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>